# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/FacultadInformatica-LinkedData/Curso2023-2024-DataScience/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery

# CODIGO EN RDFLib

# Método 1: Utilizando triples
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)
# Método 2: Utilizando subjects
for r in g.subjects(RDFS.subClassOf, ns.LivingThing):
    print(r)

# CODIGO EN SPARQL

q1 = '''
  SELECT distinct ?subclass
  WHERE
  {
    ?subclass rdfs:subClassOf* ns:LivingThing.
  }
  '''

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results


# CODIGO EN RDFLib

for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s1)):
    print(s2)

# CODIGO EN SPARQL

q2 = '''
  SELECT ?individuals
WHERE {
  ?individuals a/rdfs:subClassOf* ns:Person
}
  '''

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results

# CODIGO EN RDFLib

for class_type in [ns.Person, ns.Animal]:
    for individual in g.subjects(RDF.type, class_type):
        for s, p, o in g.triples((individual, None, None)):
            print(s, p, o)


# CODIGO EN SPARQL

q3 = '''
  SELECT DISTINCT ?individuals ?property ?value
  WHERE
  {
    {
      ?sub1 rdfs:subClassOf ns:LivingThing.
      ?individuals a ?sub1.
      ?individuals ?property ?value.
    }
    UNION
    {
      ?sub2 rdfs:subClassOf ns:LivingThing.
      ?individuals a ?sub2.
      ?individuals ?property ?value.
    }
  }
'''

for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
# Visualize the results
from rdflib import FOAF

# CODIGO EN RDFLib

for s1,p1,o1 in g.triples((None, FOAF.knows, ns.RockySmith)) :
    print (s1)


# CODIGO EN SPARQL

q4 = '''
  SELECT distinct ?persons
  WHERE
  {
    ?persons foaf:knows ns:RockySmith.
  }
  '''
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results
from rdflib import FOAF

# CODIGO EN RDFLib
entinties_know = {}

entities_know_at_least_two = set()

for s1, p1, o1 in g.triples((None, FOAF.knows, None)):
    entities_know_at_least_two.add(s1)

for entity in entities_know_at_least_two:
    print(entity)

# CODIGO EN SPARQL

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0")

q5 = prepareQuery('''
SELECT ?entity ?relatedEntity
WHERE {
      ?entity foaf:knows ?relatedEntity .
}
GROUP BY ?entity
HAVING (COUNT(DISTINCT ?relatedEntity) >= 2)
''',
initNs = { "foaf": FOAF , "ns" : ns, "vcard": VCARD}
)


for r in g.query(q5):
    print(r.entity, r.relatedEntity)